import os
import random
import datetime

# –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
SOCIALFI_CONTRACTS = [
    '''// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {}
// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {}

contract SocialProfile {{
    struct Profile {{
        string username;
        string bio;
        uint256 reputation;
        bool verified;
    }}
    
    mapping(address => Profile) public profiles;
    
    event ProfileCreated(address indexed user, string username);
    
    function createProfile(string memory _username, string memory _bio) public {{
        profiles[msg.sender] = Profile(_username, _bio, 100, false);
        emit ProfileCreated(msg.sender, _username);
    }}
    
    function getProfile(address user) public view returns (Profile memory) {{
        return profiles[user];
    }}
}}''',

    '''// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {}
// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {}

contract SocialToken {{
    mapping(address => uint256) public balances;
    mapping(address => uint256) public lastReward;
    
    string public name = "Social Reward Token";
    string public symbol = "SRT";
    uint256 public totalSupply = 1000000;
    
    event RewardClaimed(address indexed user, uint256 amount);
    
    function claimDailyReward() public {{
        require(block.timestamp >= lastReward[msg.sender] + 24 hours, "Already claimed");
        
        lastReward[msg.sender] = block.timestamp;
        balances[msg.sender] += 10;
        
        emit RewardClaimed(msg.sender, 10);
    }}
    
    function getBalance(address user) public view returns (uint256) {{
        return balances[user];
    }}
}}'''
]

DEFI_CONTRACTS = [
    '''// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {}
// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {}

contract SimpleDEX {{
    mapping(address => uint256) public ethBalance;
    mapping(address => uint256) public tokenBalance;
    
    uint256 public ethReserve;
    uint256 public tokenReserve;
    
    event LiquidityAdded(address indexed provider, uint256 ethAmount, uint256 tokenAmount);
    event TokensSwapped(address indexed user, uint256 ethIn, uint256 tokensOut);
    
    function addLiquidity(uint256 tokenAmount) public payable {{
        ethReserve += msg.value;
        tokenReserve += tokenAmount;
        
        ethBalance[msg.sender] += msg.value;
        tokenBalance[msg.sender] += tokenAmount;
        
        emit LiquidityAdded(msg.sender, msg.value, tokenAmount);
    }}
    
    function swapEthForTokens() public payable {{
        uint256 tokensOut = (msg.value * tokenReserve) / ethReserve;
        ethReserve += msg.value;
        tokenReserve -= tokensOut;
        
        emit TokensSwapped(msg.sender, msg.value, tokensOut);
    }}
}}''',

    '''// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {}
// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {}

contract StakingPool {{
    mapping(address => uint256) public stakedAmount;
    mapping(address => uint256) public stakeTime;
    mapping(address => uint256) public rewards;
    
    uint256 public totalStaked;
    uint256 public rewardRate = 10; // 10% –≥–æ–¥–æ–≤—ã—Ö
    
    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount, uint256 reward);
    
    function stake() public payable {{
        require(msg.value > 0, "Must stake something");
        
        stakedAmount[msg.sender] += msg.value;
        stakeTime[msg.sender] = block.timestamp;
        totalStaked += msg.value;
        
        emit Staked(msg.sender, msg.value);
    }}
    
    function calculateReward(address user) public view returns (uint256) {{
        if (stakedAmount[user] == 0) return 0;
        
        uint256 timeStaked = block.timestamp - stakeTime[user];
        uint256 reward = (stakedAmount[user] * rewardRate * timeStaked) / (365 days * 100);
        
        return reward;
    }}
    
    function withdraw() public {{
        uint256 amount = stakedAmount[msg.sender];
        uint256 reward = calculateReward(msg.sender);
        
        require(amount > 0, "Nothing to withdraw");
        
        stakedAmount[msg.sender] = 0;
        totalStaked -= amount;
        
        payable(msg.sender).transfer(amount + reward);
        emit Withdrawn(msg.sender, amount, reward);
    }}
}}'''
]

def generate_contract():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
    contract_type = random.choice(["socialfi", "defi"])
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if contract_type == "socialfi":
        template = random.choice(SOCIALFI_CONTRACTS)
        contract_name = f"SocialFi_{random.randint(1000, 9999)}"
    else:
        template = random.choice(DEFI_CONTRACTS)
        contract_name = f"DeFi_{random.randint(1000, 9999)}"
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    contract_code = template.format(contract_name, timestamp)
    
    return contract_type, contract_name, contract_code

def save_contract(contract_type, contract_name, contract_code):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ñ–∞–π–ª"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    folder = f"contracts/{contract_type}"
    os.makedirs(folder, exist_ok=True)
    
    # –ò–º—è —Ñ–∞–π–ª–∞
    filename = f"{folder}/{contract_name}.sol"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(filename, "w", encoding="utf-8") as f:
        f.write(contract_code)
    
    return filename

def update_readme(contract_type, contract_name):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç README.md"""
    readme_content = f"""# ü§ñ GitHub Activity Bot

–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Smart Contracts –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç:** {contract_name} ({contract_type.upper()})

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞

- `contracts/defi/` - DeFi –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (DEX, —Å—Ç–µ–π–∫–∏–Ω–≥, —Ñ–∞—Ä–º–∏–Ω–≥)
- `contracts/socialfi/` - Social-Fi –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–ø—Ä–æ—Ñ–∏–ª–∏, —Ç–æ–∫–µ–Ω—ã, —Ä–µ–ø—É—Ç–∞—Ü–∏—è)
- `scripts/` - –°–∫—Ä–∏–ø—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

## üéØ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞

–ò–∑—É—á–µ–Ω–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Smart Contracts –≤ –æ–±–ª–∞—Å—Ç–∏:
- **DeFi** (–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã)
- **Social-Fi** (–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã)

## ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è

–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ GitHub Actions –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.

---
*–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é GitHub Activity Bot üöÄ*
"""
    
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    contract_type, contract_name, contract_code = generate_contract()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filename = save_contract(contract_type, contract_name, contract_code)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º README
    update_readme(contract_type, contract_name)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {filename}")
    print(f"üìù –¢–∏–ø: {contract_type.upper()}")
    print(f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {contract_name}")

if __name__ == "__main__":
    main()
